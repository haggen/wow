#!/usr/bin/env bash

# Sane defaults.
set -euo pipefail

# Find scripts directory.
script="$0"
if test -L "$script"; then
	script="$(readlink -f "$0")"
fi
prefix="$(dirname "$script")"
script="$(basename "$script")"

# Print the manual.
help() {
	cat <<-EOF >&2
		About
		        Parse Git tag to get the respective add-on directory.

		Usage
		        $script -h
		        $script [-xa] <tag>

		Flags
		        -h      Print this manual.
		        -x      Enable debug mode.
		        -a      Print absolute path.
	EOF
}

# Parse and apply flags.
while getopts ":xha" option; do
	case "$option" in
		x)
			set -x
			;;
		h)
			help
			exit
			;;
		a)
			output="absolute"
			;;
		?)
			echo "$script: unknown flag '$OPTARG', try -h" >&2
			exit
			;;
	esac
done

# Drop flags by shifting arguments.
shift $((OPTIND - 1))

# Test required arguments.
if test -z "$*"; then
	echo "$script: missing required argument, see -h" >&2
	exit
fi

# Release tag, e.g. Add-on/v42.
tag="$1"

# Output mode, e.g. absolute.
output="${output:-relative}"

# Tagged commit. e.g. 0123456789abcdef.
commit="$(git rev-parse --verify --quiet "$tag" 2>/dev/null || :)"

# Validate tag.
if test -z "$commit"; then
    echo "$script: '$tag' is not a valid tag" >&2
    exit 1
fi

# Manifest file path. e.g. Add-on/Add-on.toc.
manifest="$(git diff-tree --no-commit-id --name-only -r "$commit")"

# Print out relative path.
if test "$output" = "relative"; then
	dirname "$manifest"
	exit 0
fi

# Git root directory.
root="$(git rev-parse --show-toplevel)"

# Print out absolute path.
dirname "$root/$manifest"
