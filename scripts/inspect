#!/usr/bin/env bash

# Sane defaults.
set -euo pipefail

# Find scripts directory.
script="$0"
if test -L "$script"; then
	script="$(readlink -f "$0")"
fi
prefix="$(dirname "$script")"
script="$(basename "$script")"

# Print the manual.
help() {
	cat <<-EOF >&2
		About
		        Inspect add-on information.

		Usage
		        $script -h
		        $script [-x] -V <path>
		        $script [-x] -p <path>
		        $script [-x] -m <path>
		        $script [-x] -n <path>
		        $script [-x] -i <path>
		        $script [-x] -v <path>
		        $script [-x] -t <path>
		        $script [-x] -a <path>
		        $script [-x] -r <path>

		Flags
		        -h      Print this manual.
		        -x      Enable debug mode.
		        -V      Validate given path is a valid add-on.
		        -p      Print add-on supported platforms.
		        -m      Print add-on manifest file path.
		        -n      Print add-on name.
		        -i      Print add-on interface version.
		        -v      Print add-on version.
		        -t      Print add-on release tag.
		        -a      Print add-on archive file name.
		        -r      Print add-on release title.
	EOF
}

# Parse and apply flags.
while getopts ":xhVpmnivtar" option; do
	case "$option" in
		x)
			set -x
			;;
		h)
			help
			exit
			;;
		V)
			output="validate"
			;;
		p)
			output="platforms"
			;;
		m)
			output="manifest"
			;;
		n)
			output="name"
			;;
		i)
			output="interface"
			;;
		v)
			output="version"
			;;
		t)
			output="tag"
			;;
		a)
			output="archive"
			;;
		r)
			output="release"
			;;
		?)
			echo "$script: unknown flag '$OPTARG', try -h" >&2
			exit
			;;
	esac
done

# Drop flags by shifting arguments.
shift $((OPTIND - 1))

# Test required arguments.
if test -z "$*"; then
	echo "$script: missing required argument, see -h" >&2
	exit
fi

# Test required flags.
if test -z "${output:-}"; then
	echo "$script: missing required flag, see -h" >&2
	exit
fi

# Add-on directory path, e.g. ./Add-on.
target="$1"

# Test the add-on directory.
if ! test -d "$target"; then
	echo "$script: '$target' is not a directory" >&2
	exit 1
fi

# Name of the add-on, e.g. Add-on.
name="$(basename "$target")"

# Manifest file path. e.g. Add-on/Add-on.toc.
manifest="$target/$name.toc"

# Test manifest file.
if ! test -f "$manifest"; then
	echo "$0: manifest '$manifest' is not a file" >&2
	exit 1
fi

# Interface version, e.g. 11301.
interface="$(grep -Po "Interface: \K.+" "$manifest")"

# Add-on version, e.g. 42.
version="$(grep -Po "Version: \K.+" "$manifest")"

# Detect game from interface version.
case "$interface" in
	3????)
		platforms="Wrath"
		;;
	2????)
		platforms="TBC"
		;;
	1????)
		platforms="Vanilla"
		;;
	1?????|9????|8????)
		platforms="Mainline"
		;;
	*)
		echo "$0: unrecognized interface version '$interface'" >&2
		exit 1
		;;
esac

# Detect additional supported platforms from suffixed manifest files.
for f in "$target"/*_*.toc; do
	f="${f#*_}"
	platforms="$platforms,${f%%.*}"
done

# Output requested information.
case "${output=}" in
	validate)
		exit 0
		;;
	platforms)
		echo "$platforms"
		;;
	manifest)
		echo "$manifest"
		;;
	name)
		echo "$name"
		;;
	interface)
		echo "$interface"
		;;
	version)
		echo "$version"
		;;
	tag)
		echo "$name/v$version"
		;;
	archive)
		echo "$name-v$version.zip"
		;;
	release)
		echo "$name v$version"
		;;
esac

