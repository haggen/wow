#!/usr/bin/env bash

#
# Bump version of given add-on.
#

set -euo pipefail

help() {
	cat <<-EOF >&2
		Usage: $0 [-h|-p|-m|-M] <path>
	EOF
}

commits-since() {
	local range
	range="$(git describe --abbrev=0 --long --match "$1/*" 2>/dev/null | cut -f3 -d-)..HEAD"
	git rev-list --count "${range#..}" -- "$1" 2>/dev/null
}

opts=$(getopt -n "$0" -o hpmM -l help,patch,minor,major -- "$@")

if test $? -ne 0; then
	exit 1
fi

eval set -- "$opts"

while :; do
	case "$1" in
		-p|--patch)
			bump="patch"
			shift
			;;
		-m|--minor)
			bump="minor"
			shift
			;;
		-M|--major)
			bump="major"
			shift
			;;
		-h|--help)
			help
			exit
			;;
		--)
			shift
			break
			;;
	esac
done

if test -z "$*"; then
	echo "$0: missing argument, try --help for more information" >&2
	exit 1
fi

target="$1"

if ! test -d "$target"; then
	echo "$0: '$target' is not a directory" >&2
	exit 1
fi

name="$(scripts/inspect -n "$target")"
manifest="$target/$name.toc"
platform="$(scripts/inspect -P "$target")"

old_version="$(scripts/inspect -v "$target")"

patch="$(scripts/inspect -p "$target")"
minor="$(scripts/inspect -m "$target")"
major="$(scripts/inspect -M "$target")"

case "${bump=patch}" in
	patch)
		count=$(commits-since "$platform/$name")
		patch=$((patch + count))
		;;
	minor)
		patch=0
		minor=$((minor + 1))
		;;
	major)
		patch=0
		minor=0
		major=$((major + 1))
		;;
esac

new_version="$major.$minor.$patch"

if test "$old_version" = "$new_version"; then
	echo "$0: versions are identical" >&2
	exit 1
fi

sed -i "s/Version: $old_version/Version: $new_version/" "$manifest"

git commit -m "Bump $platform/$name to $new_version" "$manifest"
